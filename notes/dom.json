
    {
      "domain": "DOM",
      "description": "This domain exposes DOM read\/write operations. Each DOM Node is represented with its mirror object that has an <code>id<\/code>. This <code>id<\/code> can be used to get additional information on the Node, resolve it into the JavaScript object wrapper, etc. It is important that client receives DOM events only for the nodes that are known to the client. Backend keeps track of the nodes that were sent to the client and never sends the same node twice. It is client's responsibility to collect information about the nodes that were sent to the client.<p>Note that <code>iframe<\/code> owner elements will return corresponding document elements as their child nodes.<\/p>",
      "types": [
        {
          "id": "NodeId",
          "type": "integer",
          "description": "Unique DOM node identifier."
        },
        {
          "id": "BackendNodeId",
          "type": "integer",
          "description": "Unique DOM node identifier used to reference a node that may not have been pushed to the front-end.",
          "hidden": true
        },
        {
          "id": "BackendNode",
          "type": "object",
          "properties": [
            {
              "name": "nodeType",
              "type": "integer",
              "description": "<code>Node<\/code>'s nodeType."
            },
            {
              "name": "nodeName",
              "type": "string",
              "description": "<code>Node<\/code>'s nodeName."
            },
            {
              "name": "backendNodeId",
              "$ref": "BackendNodeId"
            }
          ],
          "hidden": true,
          "description": "Backend node with a friendly name."
        },
        {
          "id": "PseudoType",
          "type": "string",
          "enum": [
            "first-line",
            "first-letter",
            "before",
            "after",
            "backdrop",
            "selection",
            "first-line-inherited",
            "scrollbar",
            "scrollbar-thumb",
            "scrollbar-button",
            "scrollbar-track",
            "scrollbar-track-piece",
            "scrollbar-corner",
            "resizer",
            "input-list-button"
          ],
          "description": "Pseudo element type."
        },
        {
          "id": "ShadowRootType",
          "type": "string",
          "enum": [
            "user-agent",
            "author"
          ],
          "description": "Shadow root type."
        },
        {
          "id": "Node",
          "type": "object",
          "properties": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Node identifier that is passed into the rest of the DOM messages as the <code>nodeId<\/code>. Backend will only push node with given <code>id<\/code> once. It is aware of all requested nodes and will only fire DOM events for nodes known to the client."
            },
            {
              "name": "nodeType",
              "type": "integer",
              "description": "<code>Node<\/code>'s nodeType."
            },
            {
              "name": "nodeName",
              "type": "string",
              "description": "<code>Node<\/code>'s nodeName."
            },
            {
              "name": "localName",
              "type": "string",
              "description": "<code>Node<\/code>'s localName."
            },
            {
              "name": "nodeValue",
              "type": "string",
              "description": "<code>Node<\/code>'s nodeValue."
            },
            {
              "name": "childNodeCount",
              "type": "integer",
              "optional": true,
              "description": "Child count for <code>Container<\/code> nodes."
            },
            {
              "name": "children",
              "type": "array",
              "optional": true,
              "items": {
                "$ref": "Node"
              },
              "description": "Child nodes of this node when requested with children."
            },
            {
              "name": "attributes",
              "type": "array",
              "optional": true,
              "items": {
                "type": "string"
              },
              "description": "Attributes of the <code>Element<\/code> node in the form of flat array <code>[name1, value1, name2, value2]<\/code>."
            },
            {
              "name": "documentURL",
              "type": "string",
              "optional": true,
              "description": "Document URL that <code>Document<\/code> or <code>FrameOwner<\/code> node points to."
            },
            {
              "name": "baseURL",
              "type": "string",
              "optional": true,
              "description": "Base URL that <code>Document<\/code> or <code>FrameOwner<\/code> node uses for URL completion.",
              "hidden": true
            },
            {
              "name": "publicId",
              "type": "string",
              "optional": true,
              "description": "<code>DocumentType<\/code>'s publicId."
            },
            {
              "name": "systemId",
              "type": "string",
              "optional": true,
              "description": "<code>DocumentType<\/code>'s systemId."
            },
            {
              "name": "internalSubset",
              "type": "string",
              "optional": true,
              "description": "<code>DocumentType<\/code>'s internalSubset."
            },
            {
              "name": "xmlVersion",
              "type": "string",
              "optional": true,
              "description": "<code>Document<\/code>'s XML version in case of XML documents."
            },
            {
              "name": "name",
              "type": "string",
              "optional": true,
              "description": "<code>Attr<\/code>'s name."
            },
            {
              "name": "value",
              "type": "string",
              "optional": true,
              "description": "<code>Attr<\/code>'s value."
            },
            {
              "name": "pseudoType",
              "$ref": "PseudoType",
              "optional": true,
              "description": "Pseudo element type for this node."
            },
            {
              "name": "shadowRootType",
              "$ref": "ShadowRootType",
              "optional": true,
              "description": "Shadow root type."
            },
            {
              "name": "frameId",
              "$ref": "Page.FrameId",
              "optional": true,
              "description": "Frame ID for frame owner elements.",
              "hidden": true
            },
            {
              "name": "contentDocument",
              "$ref": "Node",
              "optional": true,
              "description": "Content document for frame owner elements."
            },
            {
              "name": "shadowRoots",
              "type": "array",
              "optional": true,
              "items": {
                "$ref": "Node"
              },
              "description": "Shadow root list for given element host.",
              "hidden": true
            },
            {
              "name": "templateContent",
              "$ref": "Node",
              "optional": true,
              "description": "Content document fragment for template elements.",
              "hidden": true
            },
            {
              "name": "pseudoElements",
              "type": "array",
              "items": {
                "$ref": "Node"
              },
              "optional": true,
              "description": "Pseudo elements associated with this node.",
              "hidden": true
            },
            {
              "name": "importedDocument",
              "$ref": "Node",
              "optional": true,
              "description": "Import document for the HTMLImport links."
            },
            {
              "name": "distributedNodes",
              "type": "array",
              "items": {
                "$ref": "BackendNode"
              },
              "optional": true,
              "description": "Distributed nodes for given insertion point.",
              "hidden": true
            }
          ],
          "description": "DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes. DOMNode is a base node mirror type."
        },
        {
          "id": "RGBA",
          "type": "object",
          "properties": [
            {
              "name": "r",
              "type": "integer",
              "description": "The red component, in the [0-255] range."
            },
            {
              "name": "g",
              "type": "integer",
              "description": "The green component, in the [0-255] range."
            },
            {
              "name": "b",
              "type": "integer",
              "description": "The blue component, in the [0-255] range."
            },
            {
              "name": "a",
              "type": "number",
              "optional": true,
              "description": "The alpha component, in the [0-1] range (default: 1)."
            }
          ],
          "description": "A structure holding an RGBA color."
        },
        {
          "id": "Quad",
          "type": "array",
          "items": {
            "type": "number"
          },
          "minItems": 8,
          "maxItems": 8,
          "description": "An array of quad vertices, x immediately followed by y for each point, points clock-wise.",
          "hidden": true
        },
        {
          "id": "BoxModel",
          "type": "object",
          "hidden": true,
          "properties": [
            {
              "name": "content",
              "$ref": "Quad",
              "description": "Content box"
            },
            {
              "name": "padding",
              "$ref": "Quad",
              "description": "Padding box"
            },
            {
              "name": "border",
              "$ref": "Quad",
              "description": "Border box"
            },
            {
              "name": "margin",
              "$ref": "Quad",
              "description": "Margin box"
            },
            {
              "name": "width",
              "type": "integer",
              "description": "Node width"
            },
            {
              "name": "height",
              "type": "integer",
              "description": "Node height"
            },
            {
              "name": "shapeOutside",
              "$ref": "ShapeOutsideInfo",
              "optional": true,
              "description": "Shape outside coordinates"
            }
          ],
          "description": "Box model."
        },
        {
          "id": "ShapeOutsideInfo",
          "type": "object",
          "hidden": true,
          "properties": [
            {
              "name": "bounds",
              "$ref": "Quad",
              "description": "Shape bounds"
            },
            {
              "name": "shape",
              "type": "array",
              "items": {
                "type": "any"
              },
              "description": "Shape coordinate details"
            },
            {
              "name": "marginShape",
              "type": "array",
              "items": {
                "type": "any"
              },
              "description": "Margin shape bounds"
            }
          ],
          "description": "CSS Shape Outside details."
        },
        {
          "id": "Rect",
          "type": "object",
          "hidden": true,
          "properties": [
            {
              "name": "x",
              "type": "number",
              "description": "X coordinate"
            },
            {
              "name": "y",
              "type": "number",
              "description": "Y coordinate"
            },
            {
              "name": "width",
              "type": "number",
              "description": "Rectangle width"
            },
            {
              "name": "height",
              "type": "number",
              "description": "Rectangle height"
            }
          ],
          "description": "Rectangle."
        },
        {
          "id": "HighlightConfig",
          "type": "object",
          "properties": [
            {
              "name": "showInfo",
              "type": "boolean",
              "optional": true,
              "description": "Whether the node info tooltip should be shown (default: false)."
            },
            {
              "name": "showRulers",
              "type": "boolean",
              "optional": true,
              "description": "Whether the rulers should be shown (default: false)."
            },
            {
              "name": "showExtensionLines",
              "type": "boolean",
              "optional": true,
              "description": "Whether the extension lines from node to the rulers should be shown (default: false)."
            },
            {
              "name": "showLayoutEditor",
              "type": "boolean",
              "optional": true,
              "hidden": true
            },
            {
              "name": "contentColor",
              "$ref": "RGBA",
              "optional": true,
              "description": "The content box highlight fill color (default: transparent)."
            },
            {
              "name": "paddingColor",
              "$ref": "RGBA",
              "optional": true,
              "description": "The padding highlight fill color (default: transparent)."
            },
            {
              "name": "borderColor",
              "$ref": "RGBA",
              "optional": true,
              "description": "The border highlight fill color (default: transparent)."
            },
            {
              "name": "marginColor",
              "$ref": "RGBA",
              "optional": true,
              "description": "The margin highlight fill color (default: transparent)."
            },
            {
              "name": "eventTargetColor",
              "$ref": "RGBA",
              "optional": true,
              "hidden": true,
              "description": "The event target element highlight fill color (default: transparent)."
            },
            {
              "name": "shapeColor",
              "$ref": "RGBA",
              "optional": true,
              "hidden": true,
              "description": "The shape outside fill color (default: transparent)."
            },
            {
              "name": "shapeMarginColor",
              "$ref": "RGBA",
              "optional": true,
              "hidden": true,
              "description": "The shape margin fill color (default: transparent)."
            }
          ],
          "description": "Configuration data for the highlighting of page elements."
        }
      ],
      "commands": [
        {
          "name": "enable",
          "description": "Enables DOM agent for the given page."
        },
        {
          "name": "disable",
          "description": "Disables DOM agent for the given page."
        },
        {
          "name": "getDocument",
          "returns": [
            {
              "name": "root",
              "$ref": "Node",
              "description": "Resulting node."
            }
          ],
          "description": "Returns the root DOM node to the caller."
        },
        {
          "name": "requestChildNodes",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to get children for."
            },
            {
              "name": "depth",
              "type": "integer",
              "optional": true,
              "description": "The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.",
              "hidden": true
            }
          ],
          "description": "Requests that children of the node with given id are returned to the caller in form of <code>setChildNodes<\/code> events where not only immediate children are retrieved, but all children down to the specified depth."
        },
        {
          "name": "querySelector",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to query upon."
            },
            {
              "name": "selector",
              "type": "string",
              "description": "Selector string."
            }
          ],
          "returns": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Query selector result."
            }
          ],
          "description": "Executes <code>querySelector<\/code> on a given node."
        },
        {
          "name": "querySelectorAll",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to query upon."
            },
            {
              "name": "selector",
              "type": "string",
              "description": "Selector string."
            }
          ],
          "returns": [
            {
              "name": "nodeIds",
              "type": "array",
              "items": {
                "$ref": "NodeId"
              },
              "description": "Query selector result."
            }
          ],
          "description": "Executes <code>querySelectorAll<\/code> on a given node."
        },
        {
          "name": "setNodeName",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to set name for."
            },
            {
              "name": "name",
              "type": "string",
              "description": "New node's name."
            }
          ],
          "returns": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "New node's id."
            }
          ],
          "description": "Sets node name for a node with given id."
        },
        {
          "name": "setNodeValue",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to set value for."
            },
            {
              "name": "value",
              "type": "string",
              "description": "New node's value."
            }
          ],
          "description": "Sets node value for a node with given id."
        },
        {
          "name": "removeNode",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to remove."
            }
          ],
          "description": "Removes node with given id."
        },
        {
          "name": "setAttributeValue",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the element to set attribute for."
            },
            {
              "name": "name",
              "type": "string",
              "description": "Attribute name."
            },
            {
              "name": "value",
              "type": "string",
              "description": "Attribute value."
            }
          ],
          "description": "Sets attribute for an element with given id."
        },
        {
          "name": "setAttributesAsText",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the element to set attributes for."
            },
            {
              "name": "text",
              "type": "string",
              "description": "Text with a number of attributes. Will parse this text using HTML parser."
            },
            {
              "name": "name",
              "type": "string",
              "optional": true,
              "description": "Attribute name to replace with new attributes derived from text in case text parsed successfully."
            }
          ],
          "description": "Sets attributes on element with given id. This method is useful when user edits some existing attribute value and types in several attribute name\/value pairs."
        },
        {
          "name": "removeAttribute",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the element to remove attribute from."
            },
            {
              "name": "name",
              "type": "string",
              "description": "Name of the attribute to remove."
            }
          ],
          "description": "Removes attribute with given name from an element with given id."
        },
        {
          "name": "getOuterHTML",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to get markup for."
            }
          ],
          "returns": [
            {
              "name": "outerHTML",
              "type": "string",
              "description": "Outer HTML markup."
            }
          ],
          "description": "Returns node's HTML markup."
        },
        {
          "name": "setOuterHTML",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to set markup for."
            },
            {
              "name": "outerHTML",
              "type": "string",
              "description": "Outer HTML markup to set."
            }
          ],
          "description": "Sets node HTML markup, returns new node id."
        },
        {
          "name": "performSearch",
          "parameters": [
            {
              "name": "query",
              "type": "string",
              "description": "Plain text or query selector or XPath search query."
            },
            {
              "name": "includeUserAgentShadowDOM",
              "type": "boolean",
              "optional": true,
              "description": "True to search in user agent shadow DOM.",
              "hidden": true
            }
          ],
          "returns": [
            {
              "name": "searchId",
              "type": "string",
              "description": "Unique search session identifier."
            },
            {
              "name": "resultCount",
              "type": "integer",
              "description": "Number of search results."
            }
          ],
          "description": "Searches for a given string in the DOM tree. Use <code>getSearchResults<\/code> to access search results or <code>cancelSearch<\/code> to end this search session.",
          "hidden": true
        },
        {
          "name": "getSearchResults",
          "parameters": [
            {
              "name": "searchId",
              "type": "string",
              "description": "Unique search session identifier."
            },
            {
              "name": "fromIndex",
              "type": "integer",
              "description": "Start index of the search result to be returned."
            },
            {
              "name": "toIndex",
              "type": "integer",
              "description": "End index of the search result to be returned."
            }
          ],
          "returns": [
            {
              "name": "nodeIds",
              "type": "array",
              "items": {
                "$ref": "NodeId"
              },
              "description": "Ids of the search result nodes."
            }
          ],
          "description": "Returns search results from given <code>fromIndex<\/code> to given <code>toIndex<\/code> from the sarch with the given identifier.",
          "hidden": true
        },
        {
          "name": "discardSearchResults",
          "parameters": [
            {
              "name": "searchId",
              "type": "string",
              "description": "Unique search session identifier."
            }
          ],
          "description": "Discards search results from the session with the given id. <code>getSearchResults<\/code> should no longer be called for that search.",
          "hidden": true
        },
        {
          "name": "requestNode",
          "parameters": [
            {
              "name": "objectId",
              "$ref": "Runtime.RemoteObjectId",
              "description": "JavaScript object id to convert into node."
            }
          ],
          "returns": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Node id for given object."
            }
          ],
          "description": "Requests that the node is sent to the caller given the JavaScript node object reference. All nodes that form the path from the node to the root are also sent to the client as a series of <code>setChildNodes<\/code> notifications."
        },
        {
          "name": "setInspectModeEnabled",
          "hidden": true,
          "parameters": [
            {
              "name": "enabled",
              "type": "boolean",
              "description": "True to enable inspection mode, false to disable it."
            },
            {
              "name": "inspectUAShadowDOM",
              "type": "boolean",
              "optional": true,
              "description": "True to enable inspection mode for user agent shadow DOM."
            },
            {
              "name": "highlightConfig",
              "$ref": "HighlightConfig",
              "optional": true,
              "description": "A descriptor for the highlight appearance of hovered-over nodes. May be omitted if <code>enabled == false<\/code>."
            }
          ],
          "description": "Enters the 'inspect' mode. In this mode, elements that user is hovering over are highlighted. Backend then generates 'inspectNodeRequested' event upon element selection."
        },
        {
          "name": "highlightRect",
          "parameters": [
            {
              "name": "x",
              "type": "integer",
              "description": "X coordinate"
            },
            {
              "name": "y",
              "type": "integer",
              "description": "Y coordinate"
            },
            {
              "name": "width",
              "type": "integer",
              "description": "Rectangle width"
            },
            {
              "name": "height",
              "type": "integer",
              "description": "Rectangle height"
            },
            {
              "name": "color",
              "$ref": "RGBA",
              "optional": true,
              "description": "The highlight fill color (default: transparent)."
            },
            {
              "name": "outlineColor",
              "$ref": "RGBA",
              "optional": true,
              "description": "The highlight outline color (default: transparent)."
            }
          ],
          "description": "Highlights given rectangle. Coordinates are absolute with respect to the main frame viewport."
        },
        {
          "name": "highlightQuad",
          "parameters": [
            {
              "name": "quad",
              "$ref": "Quad",
              "description": "Quad to highlight"
            },
            {
              "name": "color",
              "$ref": "RGBA",
              "optional": true,
              "description": "The highlight fill color (default: transparent)."
            },
            {
              "name": "outlineColor",
              "$ref": "RGBA",
              "optional": true,
              "description": "The highlight outline color (default: transparent)."
            }
          ],
          "description": "Highlights given quad. Coordinates are absolute with respect to the main frame viewport.",
          "hidden": true
        },
        {
          "name": "highlightNode",
          "parameters": [
            {
              "name": "highlightConfig",
              "$ref": "HighlightConfig",
              "description": "A descriptor for the highlight appearance."
            },
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "optional": true,
              "description": "Identifier of the node to highlight."
            },
            {
              "name": "backendNodeId",
              "$ref": "BackendNodeId",
              "optional": true,
              "description": "Identifier of the backend node to highlight."
            },
            {
              "name": "objectId",
              "$ref": "Runtime.RemoteObjectId",
              "optional": true,
              "description": "JavaScript object id of the node to be highlighted.",
              "hidden": true
            }
          ],
          "description": "Highlights DOM node with given id or with the given JavaScript object wrapper. Either nodeId or objectId must be specified."
        },
        {
          "name": "hideHighlight",
          "description": "Hides DOM node highlight."
        },
        {
          "name": "highlightFrame",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "Page.FrameId",
              "description": "Identifier of the frame to highlight."
            },
            {
              "name": "contentColor",
              "$ref": "RGBA",
              "optional": true,
              "description": "The content box highlight fill color (default: transparent)."
            },
            {
              "name": "contentOutlineColor",
              "$ref": "RGBA",
              "optional": true,
              "description": "The content box highlight outline color (default: transparent)."
            }
          ],
          "description": "Highlights owner element of the frame with given id.",
          "hidden": true
        },
        {
          "name": "pushNodeByPathToFrontend",
          "parameters": [
            {
              "name": "path",
              "type": "string",
              "description": "Path to node in the proprietary format."
            }
          ],
          "returns": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node for given path."
            }
          ],
          "description": "Requests that the node is sent to the caller given its path. \/\/ FIXME, use XPath",
          "hidden": true
        },
        {
          "name": "pushNodesByBackendIdsToFrontend",
          "parameters": [
            {
              "name": "backendNodeIds",
              "type": "array",
              "items": {
                "$ref": "BackendNodeId"
              },
              "description": "The array of backend node ids."
            }
          ],
          "returns": [
            {
              "name": "nodeIds",
              "type": "array",
              "items": {
                "$ref": "NodeId"
              },
              "description": "The array of ids of pushed nodes that correspond to the backend ids specified in backendNodeIds."
            }
          ],
          "description": "Requests that a batch of nodes is sent to the caller given their backend node ids.",
          "hidden": true
        },
        {
          "name": "setInspectedNode",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "DOM node id to be accessible by means of $x command line API."
            }
          ],
          "description": "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions).",
          "hidden": true
        },
        {
          "name": "resolveNode",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to resolve."
            },
            {
              "name": "objectGroup",
              "type": "string",
              "optional": true,
              "description": "Symbolic group name that can be used to release multiple objects."
            }
          ],
          "returns": [
            {
              "name": "object",
              "$ref": "Runtime.RemoteObject",
              "description": "JavaScript object wrapper for given node."
            }
          ],
          "description": "Resolves JavaScript node object for given node id."
        },
        {
          "name": "getAttributes",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to retrieve attibutes for."
            }
          ],
          "returns": [
            {
              "name": "attributes",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "An interleaved array of node attribute names and values."
            }
          ],
          "description": "Returns attributes for the specified node."
        },
        {
          "name": "copyTo",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to copy."
            },
            {
              "name": "targetNodeId",
              "$ref": "NodeId",
              "description": "Id of the element to drop the copy into."
            },
            {
              "name": "insertBeforeNodeId",
              "$ref": "NodeId",
              "optional": true,
              "description": "Drop the copy before this node (if absent, the copy becomes the last child of <code>targetNodeId<\/code>)."
            }
          ],
          "returns": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node clone."
            }
          ],
          "description": "Creates a deep copy of the specified node and places it into the target container before the given anchor.",
          "hidden": true
        },
        {
          "name": "moveTo",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to move."
            },
            {
              "name": "targetNodeId",
              "$ref": "NodeId",
              "description": "Id of the element to drop the moved node into."
            },
            {
              "name": "insertBeforeNodeId",
              "$ref": "NodeId",
              "optional": true,
              "description": "Drop node before this one (if absent, the moved node becomes the last child of <code>targetNodeId<\/code>)."
            }
          ],
          "returns": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "New id of the moved node."
            }
          ],
          "description": "Moves node into the new container, places it before the given anchor."
        },
        {
          "name": "undo",
          "description": "Undoes the last performed action.",
          "hidden": true
        },
        {
          "name": "redo",
          "description": "Re-does the last undone action.",
          "hidden": true
        },
        {
          "name": "markUndoableState",
          "description": "Marks last undoable state.",
          "hidden": true
        },
        {
          "name": "focus",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to focus."
            }
          ],
          "description": "Focuses the given element.",
          "hidden": true
        },
        {
          "name": "setFileInputFiles",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the file input node to set files for."
            },
            {
              "name": "files",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Array of file paths to set."
            }
          ],
          "description": "Sets files for the given file input element.",
          "hidden": true,
          "handlers": [
            "browser",
            "renderer"
          ]
        },
        {
          "name": "getBoxModel",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to get box model for."
            }
          ],
          "returns": [
            {
              "name": "model",
              "$ref": "BoxModel",
              "description": "Box model for the node."
            }
          ],
          "description": "Returns boxes for the currently selected nodes.",
          "hidden": true
        },
        {
          "name": "getNodeForLocation",
          "parameters": [
            {
              "name": "x",
              "type": "integer",
              "description": "X coordinate."
            },
            {
              "name": "y",
              "type": "integer",
              "description": "Y coordinate."
            }
          ],
          "returns": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node at given coordinates."
            }
          ],
          "description": "Returns node id at given location.",
          "hidden": true
        },
        {
          "name": "getRelayoutBoundary",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node."
            }
          ],
          "returns": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Relayout boundary node id for the given node."
            }
          ],
          "description": "Returns the id of the nearest ancestor that is a relayout boundary.",
          "hidden": true
        },
        {
          "name": "getHighlightObjectForTest",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to get highlight object for."
            }
          ],
          "returns": [
            {
              "name": "highlight",
              "type": "object",
              "description": "Highlight data for the node."
            }
          ],
          "description": "For testing.",
          "hidden": true
        }
      ],
      "events": [
        {
          "name": "documentUpdated",
          "description": "Fired when <code>Document<\/code> has been totally updated. Node ids are no longer valid."
        },
        {
          "name": "inspectNodeRequested",
          "parameters": [
            {
              "name": "backendNodeId",
              "$ref": "BackendNodeId",
              "description": "Id of the node to inspect."
            }
          ],
          "description": "Fired when the node should be inspected. This happens after call to <code>setInspectModeEnabled<\/code>.",
          "hidden": true
        },
        {
          "name": "setChildNodes",
          "parameters": [
            {
              "name": "parentId",
              "$ref": "NodeId",
              "description": "Parent node id to populate with children."
            },
            {
              "name": "nodes",
              "type": "array",
              "items": {
                "$ref": "Node"
              },
              "description": "Child nodes array."
            }
          ],
          "description": "Fired when backend wants to provide client with the missing DOM structure. This happens upon most of the calls requesting node ids."
        },
        {
          "name": "attributeModified",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node that has changed."
            },
            {
              "name": "name",
              "type": "string",
              "description": "Attribute name."
            },
            {
              "name": "value",
              "type": "string",
              "description": "Attribute value."
            }
          ],
          "description": "Fired when <code>Element<\/code>'s attribute is modified."
        },
        {
          "name": "attributeRemoved",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node that has changed."
            },
            {
              "name": "name",
              "type": "string",
              "description": "A ttribute name."
            }
          ],
          "description": "Fired when <code>Element<\/code>'s attribute is removed."
        },
        {
          "name": "inlineStyleInvalidated",
          "parameters": [
            {
              "name": "nodeIds",
              "type": "array",
              "items": {
                "$ref": "NodeId"
              },
              "description": "Ids of the nodes for which the inline styles have been invalidated."
            }
          ],
          "description": "Fired when <code>Element<\/code>'s inline style is modified via a CSS property modification.",
          "hidden": true
        },
        {
          "name": "characterDataModified",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node that has changed."
            },
            {
              "name": "characterData",
              "type": "string",
              "description": "New text value."
            }
          ],
          "description": "Mirrors <code>DOMCharacterDataModified<\/code> event."
        },
        {
          "name": "childNodeCountUpdated",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node that has changed."
            },
            {
              "name": "childNodeCount",
              "type": "integer",
              "description": "New node count."
            }
          ],
          "description": "Fired when <code>Container<\/code>'s child node count has changed."
        },
        {
          "name": "childNodeInserted",
          "parameters": [
            {
              "name": "parentNodeId",
              "$ref": "NodeId",
              "description": "Id of the node that has changed."
            },
            {
              "name": "previousNodeId",
              "$ref": "NodeId",
              "description": "If of the previous siblint."
            },
            {
              "name": "node",
              "$ref": "Node",
              "description": "Inserted node data."
            }
          ],
          "description": "Mirrors <code>DOMNodeInserted<\/code> event."
        },
        {
          "name": "childNodeRemoved",
          "parameters": [
            {
              "name": "parentNodeId",
              "$ref": "NodeId",
              "description": "Parent id."
            },
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node that has been removed."
            }
          ],
          "description": "Mirrors <code>DOMNodeRemoved<\/code> event."
        },
        {
          "name": "shadowRootPushed",
          "parameters": [
            {
              "name": "hostId",
              "$ref": "NodeId",
              "description": "Host element id."
            },
            {
              "name": "root",
              "$ref": "Node",
              "description": "Shadow root."
            }
          ],
          "description": "Called when shadow root is pushed into the element.",
          "hidden": true
        },
        {
          "name": "shadowRootPopped",
          "parameters": [
            {
              "name": "hostId",
              "$ref": "NodeId",
              "description": "Host element id."
            },
            {
              "name": "rootId",
              "$ref": "NodeId",
              "description": "Shadow root id."
            }
          ],
          "description": "Called when shadow root is popped from the element.",
          "hidden": true
        },
        {
          "name": "pseudoElementAdded",
          "parameters": [
            {
              "name": "parentId",
              "$ref": "NodeId",
              "description": "Pseudo element's parent element id."
            },
            {
              "name": "pseudoElement",
              "$ref": "Node",
              "description": "The added pseudo element."
            }
          ],
          "description": "Called when a pseudo element is added to an element.",
          "hidden": true
        },
        {
          "name": "pseudoElementRemoved",
          "parameters": [
            {
              "name": "parentId",
              "$ref": "NodeId",
              "description": "Pseudo element's parent element id."
            },
            {
              "name": "pseudoElementId",
              "$ref": "NodeId",
              "description": "The removed pseudo element id."
            }
          ],
          "description": "Called when a pseudo element is removed from an element.",
          "hidden": true
        },
        {
          "name": "distributedNodesUpdated",
          "parameters": [
            {
              "name": "insertionPointId",
              "$ref": "NodeId",
              "description": "Insertion point where distrubuted nodes were updated."
            },
            {
              "name": "distributedNodes",
              "type": "array",
              "items": {
                "$ref": "BackendNode"
              },
              "description": "Distributed nodes for given insertion point."
            }
          ],
          "description": "Called when distrubution is changed.",
          "hidden": true
        }
      ]
    }
